#! /usr/bin/env gosh

;;; Convert IRC logs (from Irssi) into JSON Lines format.

;; Copyright 2021 Lassi Kortela
;; SPDX-License-Identifier: MIT

(import (scheme base) (scheme file) (scheme write)
        (srfi 1) (srfi 13) (srfi 14) (srfi 19) (srfi 180) (srfi 193))

(define (writeln x) (write x) (newline))

(define (json-lines-write value) (json-write value) (newline))

;;

(define read-context (make-parameter (cons "" 0)))

(define (call-with-read-from-string string proc)
  (parameterize ((read-context (cons string 0)))
    (proc)))

(define (read-char? char-set)
  (let ((s (car (read-context)))
        (i (cdr (read-context))))
    (let ((char (and (< i (string-length s)) (string-ref s i))))
      (and char
           (char-set-contains? char-set char)
           (begin (set-cdr! (read-context) (+ i 1)) char)))))

(define (read-while char-set)
  (let loop ((s ""))
    (let ((char (read-char? char-set)))
      (if (not char) s (loop (string-append s (string char)))))))

(define (read-rest) (read-while char-set:full))

(define (read-word)
  (let ((word (read-while char-set:graphic)))
    (read-while char-set:whitespace)
    word))

(define (read-word? word)
  (let ((i (cdr (read-context))))
    (if (equal? word (read-word)) word
        (begin (set-cdr! (read-context) i) #f))))

;;

(define (parse-timestamp string)
  (let ((string (if (string-null? string) "1970-01-01T00:00:00Z" string)))
    (string->date string "~Y-~m-~dT~H:~M:~SZ")
    (string-append (string-drop-right string 1) ".000Z")))

(define (read-irc-message channel)
  (let* ((time (parse-timestamp (read-word)))
         (user (read-word)))
    (cond ((equal? "names:" user)
           #f)
          ((string-suffix? ":" user)
           (let* ((user (string-drop-right user 1))
                  (message (read-rest)))
             `(((time . ,time)) ,user
               "PRIVMSG" ,channel ,message)))
          ((read-word? "joined")
           (let ((channel (read-word)))
             `(((time . ,time)) ,user
               "JOIN" ,channel)))
          ((read-word? "left")
           (let ((channel (read-word)))
             `(((time . ,time)) ,user
               "PART" ,channel)))
          ((read-word? "quit")
           (let ((message (read-rest)))
             (cond ((string-null? message)
                    `(((time . ,time))
                      ,user "QUIT"))
                   ((and (string-prefix? "(" message)
                         (string-suffix? ")" message))
                    (let ((message
                           (string-drop-right (string-drop message 1) 1)))
                      `(((time . ,time))
                        ,user "QUIT" ,message)))
                   (else
                    (error "Quit message does not have parentheses"
                           message)))))
          (else
           (let ((message (read-rest)))
             (or (let ((fix "is now known as "))
                   (and (string-prefix? fix message)
                        (let ((nick (string-drop message
                                                 (string-length fix))))
                          `(((time . ,time)) ,user
                            "NICK" ,nick))))
                 (let ((fix "has set mode "))
                   (and (string-prefix? fix message)
                        (let ((parameters
                               (string-tokenize
                                (string-drop message (string-length fix))
                                (char-set-complement char-set:whitespace))))
                          `(((time . ,time)) ,user
                            "MODE" ,channel ,@parameters))))
                 `(((time . ,time))
                   ,user "CTCP" ,channel "ACTION" ,message)))))))

(define (read-irc-messages channel)
  (let loop ((messages '()))
    (let ((line (read-line)))
      (if (eof-object? line) (reverse messages)
          (loop (cons (call-with-read-from-string
                       line (lambda () (read-irc-message channel)))
                      messages))))))

(define (main)
  (unless (= 1 (length (command-args))) (error "Usage"))
  (let ((channel (list-ref (command-args) 0)))
    (for-each json-lines-write
              (map list->vector (remove not (read-irc-messages channel))))))

(main)
